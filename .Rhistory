paste0("directory","1",".csv")
paste0(directory,"1",".csv")
paste0(directory,"/1",".csv")
paste0(directory,"/",print("%03d",1),".csv")
print(%03d,1)
printf("%03d",1)
print(%03d,1)
sprintf("%03d",1)
i=1
data=read.csv(paste0(directory,"/",sprintf("%03d",i),".csv"));
View(data)
pollutant="nitrate"
data[,pollutant]
temp=NULL;
temp=c(temp,data[,pollutant])
temp
i=2
temp=c(temp,data[,pollutant])
a=c("1","2","3")
a
b=c("1","2","3")
b
c(a,b)
directory
polutantmean <- function(directory,pollutant, id=1:332){
temp=NULL;
for(i in id)
{
data=read.csv(paste0(directory,"/",sprintf("%03d",i),".csv"));
temp=c(temp,data[,pollutant])
}
return(mean(temp[,pollutant]),na.rm=TRUE)
}
directory <- "~/Desktop/specdata"
polutantmean(directory,"nitrate")
temp=data.frame()
id=1:332
for(i in id)
{
data=read.csv(file.path(directory, paste(as.character(i),".csv",sep="")));
temp=rbind(temp,data.frame(id=i,nobs=sum((data$sulfate!=NA)&(data$nitrate!=NA))))
}
for(i in id)
{
data=read.csv(paste0(directory,"/",print("%03d",1),".csv"));
temp=rbind(temp,data.frame(id=i,nobs=sum((data$sulfate!=NA)&(data$nitrate!=NA))))
}
temp=data.frame()
for(i in id)
{
data=read.csv(paste0(directory,"/",sprintf("%03d",i),".csv"));
temp=rbind(temp,data.frame(id=i,nobs=sum((data$sulfate!=NA)&(data$nitrate!=NA))))
}
View(temp)
temp=data.frame()
i=1
data=read.csv(paste0(directory,"/",sprintf("%03d",i),".csv"));
temp=rbind(temp,data.frame(id=i,nobs=sum((data$sulfate!=NA)&(data$nitrate!=NA))))
View(temp)
temp=NULL;
for(i in id)
{
data=read.csv(paste0(directory,"/",sprintf("%03d",i),".csv"));
temp=c(temp,data[,pollutant])
}
pollutant="nitrate"
temp=NULL;
for(i in id)
{
data=read.csv(paste0(directory,"/",sprintf("%03d",i),".csv"));
temp=c(temp,data[,pollutant])
}
mean(temp,na.rm=TRUE)
polutantmean <- function(directory,pollutant, id=1:332){
temp=NULL;
for(i in id)
{
data=read.csv(paste0(directory,"/",sprintf("%03d",i),".csv"));
temp=c(temp,data[,pollutant])
}
return(mean(temp,na.rm=TRUE))
}
directory <- "~/Desktop/specdata"
polutantmean(directory,"nitrate")
polutantmean(directory,"nitrate", 70:72)
complete <- function(directory, id=1:332)
{
temp=data.frame()
for(i in id)
{
data=read.csv(paste0(directory,"/",sprintf("%03d",i),".csv"));
temp=rbind(temp,data.frame(id=i,nobs=sum((data$sulfate!=NA)&(data$nitrate!=NA))))
}
return(temp)
}
complete("dir", 1)
complete("directory", 1)
directory <- "~/Desktop/specdata"
complete("directory", 1)
directory <- "~/Desktop/specdata"
complete <- function(directory, id=1:332)
for(i in id)
}
}
}
}
complete <- function(directory, id=1:332){
temp=data.frame()
for(i in id)
{
data=read.csv(paste0(directory,"/",sprintf("%03d",i),".csv"));
temp=rbind(temp,data.frame(id=i,nobs=sum((data$sulfate!=NA)&(data$nitrate!=NA))))
}
return(temp)
}
complete(directory, 1)
complete(directory, c(2, 4, 8, 10, 12))
complete <- function(directory, id=1:332){
temp=data.frame()
for(i in id)
{
data=read.csv(paste0(directory,"/",sprintf("%03d",i),".csv"));
temp=rbind(temp,data.frame(id=i,nobs=sum((data$sulfate!=NA)&(data$nitrate!=NA))))
}
return(temp)
}
temp=data.frame()
i=1
data=read.csv(paste0(directory,"/",sprintf("%03d",i),".csv"));
View(data)
nobs=sum((data$sulfate!=NA)&(data$nitrate!=NA)))
nobs=sum((data$sulfate!=NA)&(data$nitrate!=NA))
nobs
nobs=sum(data$sulfate!=NA)
nobs
data$sulfate!=NA
!(data$sulfate==NA)
is.na(data$sulfate)
!is.na(data$sulfate)
sum(!is.na(data$sulfate))
sum((!is.na(data$sulfate))&(!is.na(data$nitrate)))
sulfate
data
sum((!is.na(data$sulfate))&(!is.na(data$nitrate)))
data.frame()
View(data)
temp=data$Date
temp
data=data.frame(v1=c(1,2,3,4,5,6))
View(data)
data[1]
data2=c(1,2,3,4,5,6)
data2[1]
data[1]
data2
data3= data$v1
data3= data
data3= data[,1]
data=data.frame(v1=c(1,2,3,4,5,6),v2=c(1,2,3,4,5,6),v3=c(1,2,3,4,5,6))
View(data)
data3= data[,1:2]
View(data3)
data3= data[,1]
data3= data[,c("c1")]
data3= data[,c("v1")]
data3= data.frame(data[,1])
View(data3)
data3= data.frame(v1=data[,1])
View(data3)
data=data.frame(v1=3,v2=2,v3=1)
View(data)
data
rbind(data,data)
cbind(data,data)
temp=data.frame()
cbind(temp,data[,2:3])
rbind(temp,data[,2:3])
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x=5
makVector(x)
makeVector(x)
x$get
x$get()
get(x)
x
xx <- makeVector(x)
xx$set(3)
xx$get()
xx$set(5)
xx$get()
numeric()
numeric(5)
numeric(1)
numeric()
xx <- makeVector(c(1,2,3,4,5))
makeVector <- function(x) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
xx <- makeVector()
f <-function(x) {x+1}
f(1)
f()
f <-function() { 3}
f()
f <-function(x) {x+1}
f <-function(x=6) {x+1}
f()
f <-function(x= numeric()) {x+1}
f()
x=1
x
x=NULL
xx$getmean()
xx$setmean(5)
xx$getmean()
xx <- makeVector(3)
class(xx)
class(xx[1])
xx[1]
xx$set
xyz = list(x=1,y=2,z=3)
xyz
xyz = list(1,2,3)
xyz
matrix()
matrix(c(1,1,),c(2,2))
matrix(c(1,1,2,2),ncol=2)
xx <- makeVector(3)
xx$setmean(5)
xx$getmean()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function() { m <- mean; m}
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
xx$setmean(5)
m <- 5
setmean
setmean()
xx$setmean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
xyz <- makeVector(9)
xyz
y<-1
xyz <- makeVector(9)
xyz$set
xyz$set(3)
x
xyz$get
xyz$get()
xyz$set(100)
xyz$get()
xyz$setmean(55)
xyz$getmean()
xyz$list()
xyz
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemen(x)
f <- function(x){x+1}
f(1)
x
f <- function(y){y+1}
f(1)
y
y=0
f(1)
y
cachemean <- function(x123, ...) {
m <- x123$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x123$get()
m <- mean(data, ...)
x123$setmean(m)
m
}
cochemean(xyz)
cachemean(xyz)
xyz$getmean()
xyz$setmean(NULL)
xyz$getmean()
xyz$get()
cachemean(xyz)
f <- function(y=2){y+1}
f(1)
f()
makeCacheMatrix <- function(x = matrix()) {
set <- function(m) x <<- m
get <- function() return(x)
inverse <- function() return(solve(x))
list( set=set, get=get inverse = inverse)
}
makeCacheMatrix <- function(x = matrix()) {
set <- function(m) x <<- m
get <- function() return(x)
inverse <- function() return(solve(x))
list( set=set, get=get , inverse = inverse)
}
m=matrix(c(1,2,3,4),ncol=2)
m
makeCacheMatrix <- function(x = matrix()) {
set <- function(m) x <<- m
get <- function() return(x)
inverse <- function() return(solve(x))
list( set=set, get=get , inverse = inverse)
}
difficult <- makeCacheMatrix(m)
difficult$get()
difficult$inverse()
matrix()
is.na(matrix())
is.na(matrix())[1,1]
is.null(x)
x
is.null(matrix())
if(!is.na(matrix)) {
message("getting cached data")
return(m)
}
if(!is.na(matrix)) {1{}
if(!is.na(matrix)) {1}
if(!is.na(matrix)[1,1]) {1}
if((!is.na(matrix))[1,1]) {1}
if((!is.na(matrix()))[1,1]) {1}
if((is.na(matrix()))[1,1]) {1}
if((is.na(matrix()))) {1}
if((is.na(matrix()))) {1}
if((is.na(matrix()))) {2}
cacheSolve <- function(x, ...) {
m <- x$get_inverse()
if(!is.na(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set(m)
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve(difficult )
cacheSolve(difficult)
difficult$get_inverse()
makeCacheMatrix <- function(x = matrix()) {
inverse_x=matrix()
set <- function(m) x <<- m
get <- function() return(x)
inverse <- function() inverse_x = solve(x)
get_inverse <- function() inverse_x
list( set=set, get=get , inverse = inverse, get_inverse=get_inverse)
}
d = makeCacheMatrix(m)
d$get_inverse()
cacheSolve(d)
cacheSolve(d)
cacheSolve(d)
cacheSolve(d)
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix: This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inverse_x=matrix()
set <- function(m) x <<- m
get <- function() return(x)
inverse <- function() inverse_x = solve(x)
get_inverse <- function() inverse_x
list( set=set, get=get , inverse = inverse, get_inverse=get_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$get_inverse()
if(!is.na(m)) {
message("getting cached data")
return(m)
}
x$inverse()
m <- x$get_inverse()
m
## Return a matrix that is the inverse of 'x'
}
m=matrix(c(1,2,3,4),ncol=2)
cacheSolve(m)
makeCacheMatrix(m)
cacheSolve(m)
m <- x$get_inverse()
cacheSolve()
m
x <- makeCacheMatrix(m)
cacheSolve(x)
x
x$get_inverse
x$get_inverse()
x$inverse()
x$get_inverse()
makeCacheMatrix <- function(x = matrix()) {
inverse_x=matrix()
set <- function(m) x <<- m
get <- function() return(x)
inverse <- function() inverse_x = solve(x)
get_inverse <- function() inverse_x
list( set=set, get=get , inverse = inverse, get_inverse=get_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$get_inverse()
if(!is.na(m)) {
message("getting cached data")
return(m)
}
x$inverse()
m <- x$get_inverse()
m
## Return a matrix that is the inverse of 'x'
}
x <- makeCacheMatrix(m)
x$inverse()
x$get_inverse()
x$get()
makeCacheMatrix <- function(x = matrix()) {
inverse_x=matrix()
set <- function(m) x <<- m
get <- function() return(x)
inverse <- function() inverse_x <<- solve(x)
get_inverse <- function() inverse_x
list( set=set, get=get , inverse = inverse, get_inverse=get_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$get_inverse()
if(!is.na(m)) {
message("getting cached data")
return(m)
}
x$inverse()
m <- x$get_inverse()
m
## Return a matrix that is the inverse of 'x'
}
x <- makeCacheMatrix(m)
cacheSolve(x)
shiny::runApp('Documents/InstaAnalytics')
library(quantmod)
getSymbols('CPIAUCNS',src='FRED')
plot(CPIAUCNS)
View(CPIAUCNS)
getwd()
setwd("/Users/mrtial/instaAnlytics")
setwd("/Users/mrtial/documents/instaAnlytics")
setwd("/Users/mrtial/document/instaAnlytics")
setwd("/Users/mrtial/document/instaAnalytics")
setwd("/Users/mrtial/documents/instaAnalytics")
mydata<-read.csv("data.csv")
mydata<-read.csv("fred_id.csv")
mydata<-read.csv("./data/fred_id.csv")
View(mydata)
save(mydata,file="fred_id.rdata")
load("~/Documents/InstaAnalytics/fred_id.rdata")
